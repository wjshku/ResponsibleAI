#!/bin/bash
# ============================================
# Connect to Existing EC2 Instance
# ============================================
# Use this if you launched the instance via AWS Console

set -e

echo "======================================================================"
echo "CONNECT TO EXISTING EC2 INSTANCE"
echo "======================================================================"
echo ""
echo "This script helps you connect to an EC2 instance you launched"
echo "via the AWS Console."
echo ""

# ============================================
# Gather instance information
# ============================================
read -p "Enter EC2 Instance IP address: " EC2_IP
read -p "Enter path to your .pem key file [~/.ssh/trisure_key.pem]: " KEY_PATH
KEY_PATH=${KEY_PATH:-~/.ssh/trisure_key.pem}

# Expand tilde
KEY_PATH="${KEY_PATH/#\~/$HOME}"

# Validate inputs
if [ -z "$EC2_IP" ]; then
    echo "❌ IP address is required"
    exit 1
fi

if [ ! -f "$KEY_PATH" ]; then
    echo "❌ Key file not found: $KEY_PATH"
    echo ""
    echo "Make sure you:"
    echo "1. Downloaded the .pem file from AWS Console"
    echo "2. Moved it to ~/.ssh/"
    echo "3. Set permissions: chmod 400 $KEY_PATH"
    exit 1
fi

# Check key permissions
KEY_PERMS=$(stat -f "%Lp" "$KEY_PATH" 2>/dev/null || stat -c "%a" "$KEY_PATH" 2>/dev/null)
if [ "$KEY_PERMS" != "400" ]; then
    echo "⚠️  Fixing key permissions..."
    chmod 400 "$KEY_PATH"
fi

echo ""
echo "Configuration:"
echo "  Instance IP: $EC2_IP"
echo "  Key file: $KEY_PATH"
echo ""

# ============================================
# Test connection
# ============================================
echo "Testing SSH connection..."
if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
    -i "$KEY_PATH" ubuntu@$EC2_IP "exit" 2>/dev/null; then
    echo "❌ Cannot connect to instance"
    echo ""
    echo "Troubleshooting:"
    echo "1. Check the instance is running in AWS Console"
    echo "2. Check the security group allows SSH from your IP"
    echo "3. Verify the instance IP is correct"
    echo "4. Make sure you're using the right key pair"
    exit 1
fi

echo "✓ Connection successful!"
echo ""

# ============================================
# Get instance details
# ============================================
echo "Gathering instance information..."

# Get instance ID
INSTANCE_ID=$(ssh -i "$KEY_PATH" ubuntu@$EC2_IP "ec2-metadata --instance-id 2>/dev/null | cut -d' ' -f2 || echo 'unknown'")

# Get region
REGION=$(ssh -i "$KEY_PATH" ubuntu@$EC2_IP "ec2-metadata --availability-zone 2>/dev/null | cut -d' ' -f2 | sed 's/.\$//' || echo 'us-east-1'")

# Get GPU name
GPU=$(ssh -i "$KEY_PATH" ubuntu@$EC2_IP "nvidia-smi --query-gpu=name --format=csv,noheader 2>/dev/null || echo 'No GPU'")

echo "✓ Instance details:"
echo "  Instance ID: $INSTANCE_ID"
echo "  Region: $REGION"
echo "  GPU: $GPU"
echo ""

# ============================================
# Setup environment
# ============================================
read -p "Setup PyTorch environment? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    echo "Setting up environment with uv..."
    ssh -i "$KEY_PATH" ubuntu@$EC2_IP << 'EOF'
# Create directories
mkdir -p ~/ResponsibleAI/domain_adapt
mkdir -p ~/ResponsibleAI/cardd_data
mkdir -p ~/ResponsibleAI/simple_detect_car

# Install uv if not present
if ! command -v uv &> /dev/null; then
    echo "Installing uv..."
    curl -LsSf https://astral.sh/uv/install.sh | sh
    export PATH="$HOME/.cargo/bin:$PATH"
fi

echo "✓ uv installed"

# Check Python version
python3 --version

echo ""
echo "Note: Dependencies will be installed automatically when you run ./ec2_scripts/sync_to_ec2.sh and ./ec2_scripts/train_on_ec2.sh"
echo "The requirements.txt file in ~/ResponsibleAI/ will be used"
EOF
    echo "✓ Environment setup complete"
    echo ""
fi

# ============================================
# Save connection info
# ============================================
CONFIG_FILE="ec2_scripts/ec2_config.sh"
cat > $CONFIG_FILE << EOF
# EC2 Instance Configuration
# Generated by connect_existing.sh on $(date)

export EC2_INSTANCE_ID="$INSTANCE_ID"
export EC2_PUBLIC_IP="$EC2_IP"
export EC2_REGION="$REGION"
export EC2_KEY_PATH="$KEY_PATH"
export EC2_SSH_USER="ubuntu"

# SSH command
alias ssh-ec2="ssh -i \$EC2_KEY_PATH \$EC2_SSH_USER@\$EC2_PUBLIC_IP"
EOF

echo "✓ Configuration saved to: $CONFIG_FILE"
echo ""

# ============================================
# Success message
# ============================================
echo "======================================================================"
echo "✅ READY TO USE EC2 INSTANCE"
echo "======================================================================"
echo ""
echo "To connect:"
echo "  ssh -i $KEY_PATH ubuntu@$EC2_IP"
echo ""
echo "Or source the config:"
echo "  source $CONFIG_FILE"
echo "  ssh-ec2"
echo ""
echo "Next steps:"
echo "  1. ./ec2_scripts/sync_to_ec2.sh       # Upload code and data"
echo "  2. ./ec2_scripts/train_on_ec2.sh      # Start training"
echo "  3. ./ec2_scripts/monitor_training.sh  # Check progress"
echo "  4. ./ec2_scripts/download_results.sh  # Get results"
echo ""
echo "======================================================================"
